[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nThis is Drew Haugen’s blog."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Drew Haugen’s Blog",
    "section": "",
    "text": "Exploring Statcast Data in R\n\n\n\n\n\n\n\nCode\n\n\nTutorial\n\n\nAnalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2023\n\n\nDrew Haugen\n\n\n\n\n\n\n  \n\n\n\n\nBaseball Savant\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 2, 2023\n\n\nDrew Haugen\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 26, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 23, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/my_post/savant_post.html",
    "href": "posts/my_post/savant_post.html",
    "title": "Baseball Savant",
    "section": "",
    "text": "Baseball Savant\nYou can access baseball savant at this link.\nAdditionally, this is some R code:\nThis code prints the number 10:\n\nprint(number)\n\n[1] 10\n\n\nYou can also create plots:"
  },
  {
    "objectID": "posts/first_summarizing_tutorial/summarizing_sc_tutorial.html",
    "href": "posts/first_summarizing_tutorial/summarizing_sc_tutorial.html",
    "title": "Exploring Statcast Data in R",
    "section": "",
    "text": "R is an awesome tool with a relatively small learning curve, and through the efforts of a lot of awesome people, there is a massive collection of resources to learn R (for free!). This tutorial is for those who are already familiar with R, but if you’re a beginner, I can’t recommend R4DS enough. It is a perfect guide for beginners, and especially emphasizes use of the tidyverse, which makes the entire data science process and workflow far more intuitive and uniform. Now, on to the tutorial!\nLoad in Packages\nFor this analysis, you’re going to need a few packages. The {tidyverse} is essential for every project and includes packages for data manipulation, visualization, and more. Additionally, the {baseballr} package lets us scrape Statcast data directly from the MLB API into our R session. Lastly, the {gt} and {gtExtras} packages help us easily build presentable tables and the {mlbplotR} package makes it easy to incorporate MLB logos and headshots into our plots an tables.\nLoad in Data\nNext, let’s load in our data. For this tutorial, we’re going to scrape the first two-ish weeks of the 2023 season.\n\ndata1 <- statcast_search(\n  start_date = \"2023-03-30\",\n  end_date = \"2023-04-04\",\n  type = \"pitcher\"\n  )\n\ndata2 <- statcast_search(\n  start_date = \"2023-04-05\",\n  end_date = \"2023-04-11\",\n  type = \"pitcher\"\n  )\n\nmlb_data <- data1 %>%\n  bind_rows(data2)\n\nrm(data1, data2)\n\ndim(mlb_data)\n\n[1] 50567    92\n\n# You can also run View(mlb_data) to open up the data in a tab if you are\n# using the RStudio IDE\n\nThe dim() function tell us that our dataframe has 46,042 rows of 92 different variables. You can look at the different columns and the type of data they store with the str() function.\nAdd Data\nWe need to create some additional columns that will easily let us summarize our data, and this is pretty easy with the dplyr::mutate() + dplyr::if_else() combo. The description column of our data has info on what events happened on each pitch, so let’s create some binary indicators using this column that tell us if different events like a swing, whiff or chase happened, as well as if a pitch was in the zone zone or not. I created the swing_events and whiff_events vector to hold all the different values of description are swing events, as well as whiff events. Using the %in% operator, we can then check if the event in description is one of the events from each vector. This procedure is how you can determine if a value is included in a group of many possible values.\n\nswing_events <- c(\n  \"foul_tip\", \"swinging_strike\", \"swinging_strike_blocked\", \n    \"missed_bunt\", \"foul\", \"hit_into_play\", \"foul_bunt\", \"bunt_foul_tip\"\n)\n\nwhiff_events <- c(\n  \"swinging_strike\", \"foul_tip\", \"foul_bunt\", \n  \"missed_bunt\", \"swinging_strike_blocked\"\n)\n\nfull_mlb <- mlb_data %>%\n  # drop any missing rows\n  mutate(\n    is_swing = if_else(description %in% swing_events, 1, 0), # binary indicator for a swing\n    is_whiff = if_else(description %in% whiff_events, 1, 0), # binary indicator for a whiff\n    is_in_zone = if_else(zone %in% 1:9, 1, 0), # binary indicator for in-zone\n    is_out_zone = if_else(zone > 9, 1, 0), # binary indicator for out-of-zone\n    is_chase = if_else(\n      is_swing == 1 & is_out_zone == 1, 1, 0\n    ), #binary indicator for swing\n    is_contact = if_else(\n      description %in% c(\"hit_into_play\", \"foul\", \"foul_pitchout\"), 1, 0\n    ), # binary indicator for contact\n    batting_team = if_else(\n      inning_topbot == \"Top\", away_team, home_team\n    ), # column for batting team\n    pitching_team = if_else(\n      inning_topbot == \"Top\", home_team, away_team\n    ), # column for pitching team\n  )\n\nNow, that our data has everything we need, let’s move on to summarizing and exploring it!\nSummarize Data by Pitch Type\nData can be most efficiently aggregated using dplyr::summarize(), and to aggregate by different groups, you can use use dplyr::group_by() function to group the data before passing it to summarize(). It is best practice to ungroup data after the grouping is no longer need, and this can be done with dplyr::ungroup(). However, recently, the dplyr team added the .by argument to summarize() were one can supply the name of a column or a vector of column names to perform operations by, essentially a grouping. Grouups are automatically dropped after operations are performed. This addition is convenient because it eliminates the need to use group_by() and ungroup() in aggregations. For this aggregation let’s find the Swing%, SwStr%, Whiff%, Zone%, Chase%, and Run Value/100 for each pitch type, filter out out any rows that are missing a pitch type at the beginning and after aggregating let’s drop any pitch type that has been thrown 25 times or less, and the FA pitch type (which is the “Other” pitch types, essentially pitches that didn’t get classified).\n\n# Rates of events for each pitch type\npitch_type_rates <- full_mlb %>%\n  filter(\n    !is.na(pitch_type),\n    !pitch_type == \"\"\n  ) %>%\n  summarize(\n    pitches = n(),\n    swing_perc = sum(is_swing, na.rm = T)/n(),\n    swstr_perc = sum(is_whiff, na.rm = T)/n(),\n    whiff_perc = sum(is_whiff, na.rm = T)/sum(is_swing, na.rm = T),\n    zone_perc = mean(is_in_zone, na.rm = T),\n    chase_perc = sum(is_chase, na.rm = T)/sum(is_out_zone, na.rm = T),\n    run_value_rate = mean(delta_run_exp, na.rm = T) * 100,\n    .by = pitch_type\n  ) %>%\n  filter(\n    pitches >= 25,\n    pitch_type != \"FA\" # leave out \"Other\" pitch type\n  )\n\nNow, let’s compare the results the different pitch types have garnered this year. A gt table with data_color() provides a quick visual representation along with the underlying numeric figures.\n\n# Statcast hex codes\n\ncolor_vector <- c(\n  \"#D22D49\",\n  \"#FE9D00\",\n  \"#933F2C\",\n  \"#EEE716\",\n  \"#DDB33A\",\n  \"#93AFD4\",\n  \"#6236CD\",\n  \"#00D1ED\",\n  \"#3BACAC\",\n  \"#55CCAB\",\n  \"#1DBE3A\"\n)\n\npitch_type_rates %>%\n  mutate(\n    pitch_type = factor(\n      pitch_type,\n      levels = c(\n        \"FF\", \"SI\", \"FC\", \"SL\", \"ST\", \"SV\", \"KC\", \"CU\", \"FS\", \"FO\", \"CH\"\n      )\n    )\n  ) %>%\n  arrange(desc(swing_perc)) %>%\n  gt() %>%\n  data_color(\n    pitch_type,\n    method = \"factor\",\n    palette = color_vector\n  ) %>%\n  data_color(\n    swing_perc:chase_perc,\n    method = \"quantile\",\n    quantiles = 11,\n    palette = c(\"blue\", \"white\", \"red\")\n  ) %>%\n  data_color(\n    run_value_rate,\n    method = \"quantile\",\n    quantiles = 11,\n    palette = c(\"red\", \"white\", \"blue\")\n  ) %>%\n  fmt_percent(swing_perc:chase_perc, decimals = 0) %>%\n  fmt_number(run_value_rate) %>% # default rounds to 2 decimals\n  cols_align(\"center\") %>% # center data\n  cols_label(\n    pitch_type = \"Pitch Type\",\n    pitches = \"Pitches\",\n    swing_perc = \"Swing%\",\n    swstr_perc = \"SwStr%\",\n    whiff_perc = \"Whiff%\",\n    zone_perc = \"Zone%\",\n    chase_perc = \"Chase%\",\n    run_value_rate = \"RV/100\"\n  ) %>%\n  tab_header(\"Statistics by Pitch Type\") %>%\n  opt_interactive()\n\n\n\n\n\nStatistics by Pitch Type\n\n\n\n\n\n\n\nIt’s also possible to compare each statistic visuallyfor all the pitch types by leveragingggplot2::facet_wrap(), which will create a panel for each unique value of the column you supply it with. To get the data in a format that allows this to work, we need to pivot it into a row for every combination of pitch type and statistic. Luckily, this can easily be done using tidyr::pivot_longer(). After the columns containing the different stat value have been pivoted into a single row, we’ll change that row using dplyr::case_match() to have more presentable names for the statistic than the names that were used for them in the data (eg. ‘swstr_perc’ to SwStr%). Using these functions, let’s create a plot to compare different the different stats for different pitch types specifically the percentage stats.\n\nsc_colors <- c(\n  \"FF\" = \"#D22D49\",\n  \"SI\" = \"#FE9D00\",\n  \"FC\" = \"#933F2C\",\n  \"SL\" = \"#EEE716\",\n  \"ST\" = \"#DDB33A\",\n  \"SV\" = \"#93AFD4\",\n  \"KC\" = \"#6236CD\",\n  \"CU\" = \"#00D1ED\",\n  \"FS\" = \"#3BACAC\",\n  \"FO\" = \"#55CCAB\",\n  \"CH\" = \"#1DBE3A\"\n)\n\n# Swing% by pitch type\npitch_type_rates %>%\n  select(-run_value_rate) %>% # drop non-percentage stat\n  pivot_longer(\n    swing_perc:chase_perc,\n    names_to = \"stat_name\", # name column that will hold the names of the columns to stat_name\n    values_to = \"stat_value\" # name column that will hold the values of the stat columns to stat_value\n  ) %>%\n  mutate(\n    stat_name = case_match( # make stat names more presentable\n    stat_name,\n    \"swing_perc\" ~ \"Swing%\",\n    \"swstr_perc\" ~ \"SwStr%\",\n    \"whiff_perc\" ~ \"Whiff%\",\n    \"zone_perc\" ~ \"Zone%\",\n    \"chase_perc\" ~ \"Chase%\"\n    )\n  ) %>%\n  ggplot(aes(stat_value, reorder(pitch_type, stat_value))) +\n  geom_col(aes(fill = pitch_type), show.legend = FALSE) +\n  # use statcast colors\n  scale_fill_manual(values = sc_colors) +  \n  # use % on x-axis\n  scale_x_continuous(labels = scales::label_percent(accuracy = 1)) +\n  facet_wrap(~stat_name, scales = \"free_y\") + # scales = \"free_y\" lets the x-axis vary for each facet\n  theme_bw() +\n  theme(\n    plot.title = element_text(hjust = 0.5), # center plot title\n    plot.subtitle = element_text(hjust = 0.5) # and subtitle\n  ) +\n  labs(\n    x = \"Stat Value\",\n    y = \"Pitch Type\",\n    title = \"Percentage Stats by Pitch Type\",\n    subtitle = \"Data Through 4/12\",\n    caption = \"Data: Baseball Savant\"\n  )\n\n\n\n\nTeam Stats\nWe can also compare team stats.\n\n# function to summarize data\nfind_team_stats <- function(.data, team_grouping){\n  \n  .data <- .data %>%\n    summarize(\n      swing_perc = mean(is_swing, na.rm = T),\n      chase_perc = sum(is_chase, na.rm = T)/sum(is_out_zone, na.rm = T),\n      contact_perc = sum(is_contact, na.rm = T)/sum(is_swing, na.rm = T),\n      avg_ev = mean(launch_speed, na.rm = T),\n      avg_la = mean(launch_angle, na.rm = T),\n      xwobacon = mean(estimated_woba_using_speedangle, na.rm = T),\n      woba = mean(woba_value, na.rm = T),\n      run_value_rate = mean(delta_run_exp, na.rm = T) * 100,\n      .by = {{ team_grouping }}\n    )\n  \n  return(.data)\n    \n}\n\nhitting_stats <- full_mlb %>%\n  find_team_stats(batting_team) %>%\n  rename_with(\n    ~ paste0(\"batting_\", .x), # easily designate columns as batting data\n    .cols = swing_perc:run_value_rate\n  )\n\npitching_stats <- full_mlb %>%\n  find_team_stats(pitching_team) %>%\n  rename_with(\n    ~ paste0(\"pitching_\", .x), # easily designate columns as pitching data\n    .cols = swing_perc:run_value_rate\n  )\n\nteam_data <- hitting_stats %>%\n  full_join(pitching_stats, by = join_by(batting_team == pitching_team)) %>%\n  rename(team = batting_team)\n\nLet’s plot team hitting data and check out the relationship between average exit velocity and xwOBACON!\n\nhitting_outliers <- lm(\n  batting_xwobacon ~ batting_avg_ev, data = hitting_stats\n  )[[\"residuals\"]] %>%\n  mutate(\n    hitting_stats,\n    residual = .,\n    residual_rank = rank(desc(residual)),\n    is_outlier = if_else(\n      residual_rank >= 28 | residual_rank <= 3, TRUE, FALSE\n    )\n  ) %>%\n  filter(is_outlier)\n\nhitting_stats %>%\n  filter(!batting_team %in% hitting_outliers$batting_team) %>%\n  ggplot(aes(batting_avg_ev, batting_xwobacon)) +\n  geom_smooth(color = \"darkgray\", method = \"lm\") +\n  geom_point(aes(color = batting_team), size = 3) +\n  scale_color_mlb() +\n  geom_mlb_logos(\n    aes(team_abbr = batting_team), data = hitting_outliers, height = 0.1\n  ) +\n  annotate(\n    \"text\", \n    min(hitting_stats$batting_avg_ev) + 0.25, \n    max(hitting_stats$batting_xwobacon) - 0.01, \n    label = paste(\n      \"R =\", round(\n        cor(hitting_stats$batting_avg_ev, hitting_stats$batting_xwobacon), 2\n      )\n    ),\n    size = 7\n  ) +\n  theme_bw() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 15),\n    panel.grid.minor = element_blank()\n  ) +\n  labs(\n    x = \"Average Exit Velo (MPH)\",\n    y = \"xwOBACON\",\n    title = \"Team Average Exit Velo vs. xwOBACON\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'"
  }
]